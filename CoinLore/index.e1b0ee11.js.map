{"mappings":"AAAA,IAAIA,MAAQC,SAASC,cAAc,SAEnC,MAAMC,UAAS,KACd,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAO,yCAEhBF,EAAIG,iBAAiB,oBAAkB,KACtC,GAAIH,EAAII,aAAeH,eAAeI,MAAuB,MAAfL,EAAIM,OAAgB,CACjE,IAAIC,EAAaC,KAAKC,MAAMT,EAAIU,cAGhC,IAAKC,QAFLf,MAAMgB,UAAY,GAELL,EAAWM,MAAM,CAC7B,IAAIC,EAAKjB,SAASkB,cAAc,MAChCC,aAAaL,KAAMG,GACnBlB,MAAMqB,YAAYH,SAETd,EAAII,aAAeH,eAAeI,MAAuB,MAAfL,EAAIM,QACxDY,MAAK,qCACiClB,EAAIM,WAAWN,EAAImB,iBAI3DnB,EAAIoB,KAAK,OAGJJ,aAAY,CAAIK,EAAUC,KAC/B,IAAIC,EAAO1B,SAASkB,cAAc,MAClCQ,EAAKC,YAAcH,EAAe,KAElC,IAAII,EAAS5B,SAASkB,cAAc,QACpCU,EAAOD,YAAcH,EAAiB,OAEtC,IAAIK,EAAO7B,SAASkB,cAAc,MAClCW,EAAKF,YAAW,GAAMH,EAAe,OAErC,IAAIM,EAAW9B,SAASkB,cAAc,MACtCY,EAASH,YAAW,IAAOI,mBAC1BC,WAAWR,EAAoB,cAGhC,IAAIS,EAAcjC,SAASkB,cAAc,MACzCe,EAAYN,YAAW,GAAMH,EAA4B,qBACzDS,EAAcC,cAAcD,GAE5B,IAAIE,EAAenC,SAASkB,cAAc,MAC1CiB,EAAaR,YAAW,GAAMH,EAA6B,sBAC3DW,EAAeD,cAAcC,GAE7B,IAAIC,EAAcpC,SAASkB,cAAc,MACzCkB,EAAYT,YAAW,GAAMH,EAA4B,qBACzDY,EAAcF,cAAcE,GAE5B,IAAIC,EAAYrC,SAASkB,cAAc,MACvCmB,EAAUV,YAAW,IAAOI,mBAC3BC,WAAWR,EAAyB,gBAAGc,QAAQ,MAGhD,IAAIC,EAAYvC,SAASkB,cAAc,MACvCqB,EAAUZ,YAAW,IAAOI,mBAC3BC,WAAWR,EAAmB,UAAGc,QAAQ,MAG1C,IAAIE,EAAcxC,SAASkB,cAAc,MACzCsB,EAAYb,YAAW,GACnBI,mBAAmBC,WAAWR,EAAkB,SAAGc,QAAQ,OAC9DV,EAAOD,YAERF,EAAIL,YAAYM,GAChBD,EAAIL,YAAYS,GAChBJ,EAAIL,YAAYU,GAChBL,EAAIL,YAAYa,GAChBR,EAAIL,YAAYe,GAChBV,EAAIL,YAAYgB,GAChBX,EAAIL,YAAYiB,GAChBZ,EAAIL,YAAYmB,GAChBd,EAAIL,YAAYoB,IAGXN,cAAiBO,GAClBT,WAAWS,EAAQd,aAAe,GACrCc,EAAQd,YAAW,IAAKc,EAAId,cAC1Bc,EAAMC,UAAUC,IAAI,YACfF,GACGT,WAAWS,EAAQd,aAAe,GAC5Cc,EAAQd,YAAW,IAAKc,EAAEd,cAC1Bc,EAAQC,UAAUC,IAAI,YACfF,GAEDA,EAGFV,mBAAsBa,IAC3B,IAAIC,EAAWD,EAAIE,WAAWC,MAAM,KAEpC,OADAF,EAAS,GAAKA,EAAS,GAAGG,QAAO,wBAA0B,KACpDH,EAASI,KAAK,MAGtB/C,YAEAgD,aAAW,KACVhD,cACE","sources":["src/CoinLore/script.js"],"sourcesContent":["let table = document.querySelector(\"tbody\");\n\nconst getCrypto = () => {\n\tlet xhr = new XMLHttpRequest();\n\txhr.open(\"GET\", \"https://api.coinlore.net/api/tickers/\");\n\n\txhr.addEventListener(\"readystatechange\", () => {\n\t\tif (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n\t\t\tlet cryptoData = JSON.parse(xhr.responseText);\n\t\t\ttable.innerHTML = \"\";\n\n\t\t\tfor (coin of cryptoData.data) {\n\t\t\t\tlet tr = document.createElement(\"tr\");\n\t\t\t\tformatCrypto(coin, tr);\n\t\t\t\ttable.appendChild(tr);\n\t\t\t}\n\t\t} else if (xhr.readyState === XMLHttpRequest.DONE && xhr.status !== 200) {\n\t\t\talert(\n\t\t\t\t`Could not complete request\\nCode: ${xhr.status}\\n${xhr.statusText}`\n\t\t\t);\n\t\t}\n\t});\n\txhr.send(null);\n};\n\nconst formatCrypto = (coinData, row) => {\n\tlet rank = document.createElement(\"td\");\n\trank.textContent = coinData[\"rank\"];\n\n\tlet symbol = document.createElement(\"span\");\n\tsymbol.textContent = coinData[\"symbol\"];\n\n\tlet name = document.createElement(\"td\");\n\tname.textContent = `${coinData[\"name\"]}`;\n\n\tlet priceUSD = document.createElement(\"td\");\n\tpriceUSD.textContent = `$${thousandsSeparator(\n\t\tparseFloat(coinData[\"price_usd\"])\n\t)}`;\n\n\tlet perChange1H = document.createElement(\"td\");\n\tperChange1H.textContent = `${coinData[\"percent_change_1h\"]}%`;\n\tperChange1H = changePercent(perChange1H);\n\n\tlet perChange24H = document.createElement(\"td\");\n\tperChange24H.textContent = `${coinData[\"percent_change_24h\"]}%`;\n\tperChange24H = changePercent(perChange24H);\n\n\tlet perChange7D = document.createElement(\"td\");\n\tperChange7D.textContent = `${coinData[\"percent_change_7d\"]}%`;\n\tperChange7D = changePercent(perChange7D);\n\n\tlet marketCap = document.createElement(\"td\");\n\tmarketCap.textContent = `$${thousandsSeparator(\n\t\tparseFloat(coinData[\"market_cap_usd\"]).toFixed(0)\n\t)}`;\n\n\tlet volume24h = document.createElement(\"td\");\n\tvolume24h.textContent = `$${thousandsSeparator(\n\t\tparseFloat(coinData[\"volume24\"]).toFixed(0)\n\t)}`;\n\n\tlet circulation = document.createElement(\"td\");\n\tcirculation.textContent =\n\t\t`${thousandsSeparator(parseFloat(coinData[\"csupply\"]).toFixed(0))} ` +\n\t\tsymbol.textContent;\n\n\trow.appendChild(rank);\n\trow.appendChild(name);\n\trow.appendChild(priceUSD);\n\trow.appendChild(perChange1H);\n\trow.appendChild(perChange24H);\n\trow.appendChild(perChange7D);\n\trow.appendChild(marketCap);\n\trow.appendChild(volume24h);\n\trow.appendChild(circulation);\n};\n\nconst changePercent = (percent) => {\n\tif (parseFloat(percent.textContent) > 0) {\n\t\tpercent.textContent = `▲${percent.textContent}`;\n\t\tpercent.classList.add(\"positive\");\n\t\treturn percent;\n\t} else if (parseFloat(percent.textContent) < 0) {\n\t\tpercent.textContent = `▼${percent.textContent}`;\n\t\tpercent.classList.add(\"negative\");\n\t\treturn percent;\n\t}\n\treturn percent;\n};\n\nconst thousandsSeparator = (num) => {\n\tlet numParts = num.toString().split(\".\");\n\tnumParts[0] = numParts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\treturn numParts.join(\".\");\n};\n\ngetCrypto();\n\nsetInterval(() => {\n\tgetCrypto();\n}, 30000);\n"],"names":["table","document","querySelector","getCrypto","xhr","XMLHttpRequest","open","addEventListener","readyState","DONE","status","cryptoData","JSON","parse","responseText","coin","innerHTML","data","tr","createElement","formatCrypto","appendChild","alert","statusText","send","coinData","row","rank","textContent","symbol","name","priceUSD","thousandsSeparator","parseFloat","perChange1H","changePercent","perChange24H","perChange7D","marketCap","toFixed","volume24h","circulation","percent","classList","add","num","numParts","toString","split","replace","join","setInterval"],"version":3,"file":"index.e1b0ee11.js.map"}